{"version":3,"sources":["components/Grid.tsx","components/AlgoSelect.tsx","components/Node.tsx","img/heart.svg","components/Sidebar.tsx","components/Button.tsx","algorithms/helper.js","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/astar.js","algorithms/bfs.js","algorithms/greedybfs.js","components/Visualiser.tsx","components/ParticleBg.tsx","App.tsx","index.tsx"],"names":["MouseMode","AlgoSelect","React","memo","algos","setAlgo","selectStyles","option","provided","state","backgroundColor","isFocused","menu","borderRadius","zIndex","control","fontFamily","className","id","options","getOptionLabel","o","name","defaultValue","styles","onChange","Node","row","col","isStart","isFinish","distance","isWall","pathOrder","visitedOrder","onMouseDown","onMouseEnter","isAnim","visitedNodeLength","animSpeed","nodeType","baseStyles","position","top","left","animationDuration","animationIterationCount","animationName","opacity","undefined","animationTimingFunction","animationFillMode","width","height","willChange","visitedStyles","animationDelay","pathStyles","e","preventDefault","onDragStart","children","style","Grid","gridState","grid","setGrid","startState","start","setStart","finishState","finish","setFinish","run","useState","Off","dragState","setDragState","handleMouseUp","useEffect","document","addEventListener","removeEventListener","setNodeState","prop","value","prevGrid","map","r","rowIndex","c","colIndex","onContextMenu","rowId","key","node","nodeId","Start","Finish","RemoveWall","AddWall","handleMouseDown","handleMouseEnter","_extends","Object","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","transform","fill","stroke","d","_ref","svgRef","title","props","viewBox","preserveAspectRatio","ref","ForwardRef","forwardRef","Sidebar","href","Button","label","onClick","updateUnvisitedNeighbors","unvisitedNeighbors","getNeighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","neighbors","push","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","dijkstra","startNode","visitedNodesInOrder","count","unvisitedNodes","flat","sort","nodeA","nodeB","closestNode","pop","Infinity","forEach","n","dfs","dfsRecursive","console","log","astar","open","getH","Math","abs","bh","ba","g","includes","bfs","queue","shift","greedybfs","Visualiser","guaranteesShortest","weighted","algorithm","link","algo","animToggle","setAnimToggle","setAnim","cloneArray","arr","slice","Array","currentRow","weight","getInitialGrid","useCallback","newGrid","fontSize","color","marginTop","tilesVisited","reduce","a","b","max","GRID_WIDTH","round","overflow","params","particles","number","density","enable","value_area","size","random","anim","speed","line_linked","move","interactivity","detect_on","events","onhover","mode","modes","bubble","App","ParticleBg","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ad247c71.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport \"../styles/Grid.css\";\r\nimport { TNode } from \"../types/TNode\";\r\nimport Node from \"./Node\";\r\n\r\nconst cloneArray = (arr: any[][]) => {\r\n  return arr.map((row) => row.slice(0));\r\n};\r\n\r\nenum MouseMode {\r\n  Start,\r\n  Finish,\r\n  AddWall,\r\n  RemoveWall,\r\n  Off,\r\n}\r\n\r\ninterface Props {\r\n  gridState: [TNode[][], React.Dispatch<React.SetStateAction<TNode[][]>>];\r\n  startState: [number[], React.Dispatch<React.SetStateAction<number[]>>];\r\n  finishState: [number[], React.Dispatch<React.SetStateAction<number[]>>];\r\n  run: () => void;\r\n  isAnim: boolean;\r\n  animSpeed: number;\r\n  visitedNodeLength: number;\r\n}\r\n\r\nconst Grid: React.FC<Props> = ({\r\n  gridState: [grid, setGrid],\r\n  startState: [start, setStart],\r\n  finishState: [finish, setFinish],\r\n  run,\r\n  isAnim,\r\n  animSpeed,\r\n  visitedNodeLength,\r\n}) => {\r\n  const [dragState, setDragState] = useState<MouseMode>(MouseMode.Off);\r\n\r\n  const handleMouseDown = (row: number, col: number) => {\r\n    if (row === start[0] && col === start[1]) setDragState(MouseMode.Start);\r\n    else if (row === finish[0] && col === finish[1])\r\n      setDragState(MouseMode.Finish);\r\n    else if (grid[row][col].isWall) {\r\n      setNodeState(row, col, \"isWall\", false);\r\n      setDragState(MouseMode.RemoveWall);\r\n      run();\r\n    } else {\r\n      setNodeState(row, col, \"isWall\", true);\r\n      setDragState(MouseMode.AddWall);\r\n      if (!!grid[row][col].pathOrder) run();\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (e: MouseEvent) => {\r\n    setDragState(MouseMode.Off);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"mouseup\", handleMouseUp);\r\n    return () => document.removeEventListener(\"mouseup\", handleMouseUp);\r\n  }, [dragState]);\r\n\r\n  const handleMouseEnter = (row: number, col: number) => {\r\n    switch (dragState) {\r\n      case MouseMode.Start:\r\n        setStart([row, col]);\r\n        break;\r\n      case MouseMode.Finish:\r\n        setFinish([row, col]);\r\n        break;\r\n      case MouseMode.AddWall:\r\n        if (\r\n          !grid[row][col].isWall &&\r\n          !(row === start[0] && col === start[1]) &&\r\n          !(row === finish[0] && col === finish[1])\r\n        )\r\n          setNodeState(row, col, \"isWall\", true);\r\n        if (!!grid[row][col].pathOrder) run();\r\n        break;\r\n      case MouseMode.RemoveWall:\r\n        if (grid[row][col].isWall) {\r\n          setNodeState(row, col, \"isWall\", false);\r\n          run();\r\n        }\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const setNodeState = (\r\n    row: number,\r\n    col: number,\r\n    prop: string,\r\n    value: boolean\r\n  ) => {\r\n    setGrid((prevGrid) => {\r\n      return prevGrid.map((r, rowIndex) =>\r\n        rowIndex !== row\r\n          ? r\r\n          : r.map((c, colIndex) =>\r\n              colIndex !== col\r\n                ? c\r\n                : {\r\n                    ...c,\r\n                    [prop]: value,\r\n                  }\r\n            )\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n        return false;\r\n      }}\r\n      className=\"gridContainer\"\r\n    >\r\n      <table className=\"grid\">\r\n        <tbody>\r\n          {grid.map((row: TNode[], rowId: number) => (\r\n            <tr className=\"row\" key={rowId}>\r\n              {row.map((node: TNode, nodeId: number) => {\r\n                const { row, col } = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeId}\r\n                    {...node}\r\n                    isStart={row === start[0] && col === start[1]}\r\n                    isFinish={row === finish[0] && col === finish[1]}\r\n                    isAnim={isAnim}\r\n                    animSpeed={animSpeed}\r\n                    visitedNodeLength={visitedNodeLength}\r\n                    onMouseDown={(row: number, col: number) =>\r\n                      handleMouseDown(row, col)\r\n                    }\r\n                    onMouseEnter={(row: number, col: number) =>\r\n                      handleMouseEnter(row, col)\r\n                    }\r\n                  />\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { TAlgo } from \"../types/TAlgo\";\r\n\r\ninterface Props {\r\n  algos: TAlgo[];\r\n  setAlgo: React.Dispatch<React.SetStateAction<TAlgo>>;\r\n}\r\n\r\nconst AlgoSelect = React.memo<Props>(({ algos, setAlgo }) => {\r\n  const selectStyles = {\r\n    option: (provided: Object, state: any) => ({\r\n      ...provided,\r\n      backgroundColor: state.isFocused ? \"#333333\" : \"#222222\",\r\n    }),\r\n    menu: (provided: Object, state: Object) => ({\r\n      ...provided,\r\n      backgroundColor: \"#222222\",\r\n      borderRadius: 0,\r\n      zIndex: 5,\r\n    }),\r\n    control: (provided: Object, state: Object) => ({\r\n      ...provided,\r\n      borderRadius: 0,\r\n      fontFamily:\r\n        'source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace',\r\n    }),\r\n  };\r\n  return (\r\n    <>\r\n      <span className=\"text\">Select an algorithm:</span>\r\n      <Select\r\n        id=\"algoSelect\"\r\n        options={algos}\r\n        getOptionLabel={(o) => o.name}\r\n        defaultValue={algos[0]}\r\n        styles={selectStyles}\r\n        onChange={(o) => {\r\n          if (o) setAlgo(o as TAlgo);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n});\r\n\r\nexport default AlgoSelect;\r\n","import React from \"react\";\r\nimport \"../styles/Node.css\";\r\nimport { TNode } from \"../types/TNode\";\r\n\r\ninterface Props extends TNode {\r\n  isStart: boolean;\r\n  isFinish: boolean;\r\n  onMouseDown: (row: number, col: number) => void;\r\n  onMouseEnter: (row: number, col: number) => void;\r\n  isAnim: boolean;\r\n  animSpeed: number;\r\n  visitedNodeLength: number;\r\n}\r\n\r\nconst Node: React.FC<Props> = ({\r\n  row,\r\n  col,\r\n  isStart,\r\n  isFinish,\r\n  distance,\r\n  isWall,\r\n  pathOrder,\r\n  visitedOrder,\r\n  onMouseDown,\r\n  onMouseEnter,\r\n  isAnim,\r\n  animSpeed,\r\n  visitedNodeLength,\r\n}) => {\r\n  const nodeType = isStart\r\n    ? \"node-start\"\r\n    : isFinish\r\n    ? \"node-finish\"\r\n    : isWall\r\n    ? \"node-wall\"\r\n    : !!pathOrder\r\n    ? \"node-path\"\r\n    : !!visitedOrder && \"node-visited\";\r\n\r\n  const fade = ` @keyframes fade-in {\r\nfrom {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n    }`;\r\n\r\n  const baseStyles: React.CSSProperties = {\r\n    position: \"absolute\",\r\n    top: 4,\r\n    left: 4,\r\n    zIndex: 1,\r\n    animationDuration: \"0.2s\",\r\n    animationIterationCount: 1,\r\n    animationName: \"fade-in\",\r\n    opacity: isAnim ? 0 : undefined,\r\n    animationTimingFunction: \"ease-in\",\r\n    animationFillMode: \"forwards\",\r\n    width: \"calc(100% - 8px)\",\r\n    height: \"calc(100% - 8px)\",\r\n    willChange: \"opacity\",\r\n  };\r\n\r\n  const visitedStyles: React.CSSProperties = {\r\n    ...baseStyles,\r\n    animationDelay: `${visitedOrder / 100}s`,\r\n    backgroundColor:\r\n      nodeType === \"node-visited\" || nodeType === \"node-path\"\r\n        ? `rgb(${68 + (distance / 42) * (80 - 68)}, ${\r\n            80 + (distance / 42) * (197 - 80)\r\n          }, ${204 + (distance / 42) * (228 - 204)})`\r\n        : undefined,\r\n  };\r\n\r\n  const pathStyles: React.CSSProperties = {\r\n    ...baseStyles,\r\n    animationDelay: `${(visitedNodeLength + pathOrder) / 100}s`,\r\n    backgroundColor: nodeType === \"node-path\" ? \"#ffb700\" : undefined,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      id={`node ${row}-${col}`}\r\n      className={`node ${nodeType}`}\r\n      onMouseDown={(e: React.MouseEvent<HTMLTableDataCellElement>) => {\r\n        e.preventDefault();\r\n        onMouseDown(row, col);\r\n      }}\r\n      onMouseEnter={(e: React.MouseEvent<HTMLTableDataCellElement>) => {\r\n        e.preventDefault();\r\n        onMouseEnter(row, col);\r\n      }}\r\n      onDragStart={(e: React.DragEvent<HTMLTableDataCellElement>) =>\r\n        e.preventDefault()\r\n      }\r\n    >\r\n      <style children={isAnim && fade} />\r\n      <div style={visitedStyles} />\r\n      <div style={pathStyles} />\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(0.000000,236.000000) scale(0.100000,-0.100000)\",\n  fill: \"#a60000\",\n  stroke: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M430 2235 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2120 2235 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M0 1815 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M430 1815 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M850 1815 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M1700 1815 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2550 1815 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M0 1395 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M430 1395 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M850 1395 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M1280 1395 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M1700 1395 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2120 1395 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2550 1395 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M430 965 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M850 965 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M1280 965 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M1700 965 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2120 965 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M850 545 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M1280 545 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M1700 545 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M1280 125 l0 -125 125 0 125 0 0 125 0 125 -125 0 -125 0 0 -125z\"\n}));\n\nvar SvgHeart = function SvgHeart(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"14px\",\n    height: \"14px\",\n    viewBox: \"0 0 280.000000 236.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgHeart, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/heart.55ef9c89.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport \"../styles/Sidebar.css\";\r\nimport { ReactComponent as HeartIcon } from \"../img/heart.svg\";\r\n\r\nconst Sidebar = React.memo(({ children }) => (\r\n  <div className=\"sidebar\">\r\n    <h1 className=\"logo\">Pathfinding Visualiser</h1>\r\n    {children}\r\n    <div className=\"footer\">\r\n      <a\r\n        href=\"https://github.com/Andy-Zhan/pathfinding-visualiser\"\r\n        className=\"footer-link\"\r\n      >\r\n        Made with <HeartIcon className=\"heart-icon\" /> by Andy Zhan\r\n      </a>\r\n    </div>\r\n  </div>\r\n));\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"../styles/Button.css\";\r\ninterface Props {\r\n  label?: string;\r\n  onClick?: () => any;\r\n}\r\n\r\nconst Button: React.FC<Props> = ({ label, onClick }) => (\r\n  <div className=\"button-container\">\r\n    <button className=\"button\" onClick={onClick}>\r\n      {label}\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Button;\r\n","export function sortNodesByDistanceDesc(nodes) {\r\n  nodes.sort((nodeA, nodeB) => nodeB.distance - nodeA.distance);\r\n}\r\n\r\nexport function updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n  return unvisitedNeighbors;\r\n}\r\n\r\nexport function getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { row, col } = node;\r\n\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n\r\n  return neighbors;\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  return getNeighbors(node, grid).filter(\r\n    (neighbor) => !(neighbor.visitedOrder || neighbor.isWall)\r\n  );\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import {\r\n  sortNodesByDistanceDesc,\r\n  updateUnvisitedNeighbors,\r\n  getNodesInShortestPathOrder,\r\n} from \"./helper\";\r\n\r\n// Performs Dijkstra's algorithm; returns nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport default function dijkstra(grid, start, finish) {\r\n  const startNode = grid[start[0]][start[1]];\r\n  const finishNode = grid[finish[0]][finish[1]];\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  let count = 1;\r\n  const unvisitedNodes = grid.flat();\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistanceDesc(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.pop();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall && startNode !== closestNode) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return false;\r\n    closestNode.visitedOrder = count;\r\n    count++;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) {\r\n      let shortestPathNodes = getNodesInShortestPathOrder(finishNode);\r\n      shortestPathNodes.forEach((n, i) => (n.pathOrder = i + 1));\r\n      return true;\r\n    }\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n  return false;\r\n}\r\n","import { getNeighbors } from \"./helper\";\r\n\r\n// Performs Depth-first search; returns nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport default function dfs(grid, start, finish) {\r\n  let count = 1;\r\n\r\n  const startNode = grid[start[0]][start[1]];\r\n  const finishNode = grid[finish[0]][finish[1]];\r\n  const visitedNodesInOrder = [];\r\n\r\n  function dfsRecursive(node, distance) {\r\n    node.visitedOrder = count;\r\n    node.distance = distance;\r\n    visitedNodesInOrder.push(node);\r\n    if (node === finishNode) {\r\n      console.log(\"found\");\r\n      return true;\r\n    }\r\n    count++;\r\n    distance = distance + 0.05;\r\n    for (let n of getNeighbors(node, grid)) {\r\n      if (n.visitedOrder || n.isWall) continue;\r\n      if (dfsRecursive(n, distance)) return true;\r\n    }\r\n  }\r\n  if (dfsRecursive(startNode, 0)) {\r\n    visitedNodesInOrder.forEach((n, i) => (n.pathOrder = i + 1));\r\n    return true;\r\n  } else return false;\r\n}\r\n","import { getNeighbors, getNodesInShortestPathOrder } from \"./helper\";\r\n\r\n// Performs A* search.\r\n\r\nexport default function astar(grid, start, finish) {\r\n  const open = [];\r\n  const startNode = grid[start[0]][start[1]];\r\n  const finishNode = grid[finish[0]][finish[1]];\r\n\r\n  function getH(node) {\r\n    return (\r\n      Math.abs(node.row - finishNode.row) + Math.abs(node.col - finishNode.col)\r\n    );\r\n  }\r\n\r\n  open.push(startNode);\r\n  startNode.distance = 0;\r\n  let count = 1;\r\n\r\n  while (open.length) {\r\n    open.sort((nodeA, nodeB) => {\r\n      const bh = getH(nodeB);\r\n      const ba = getH(nodeA);\r\n      const b = nodeB.distance + bh;\r\n      const a = nodeA.distance + ba;\r\n      return b - a || bh - ba;\r\n    });\r\n\r\n    const currentNode = open.pop();\r\n    currentNode.visitedOrder = count;\r\n    count++;\r\n\r\n    if (currentNode === finishNode) {\r\n      let shortestPathNodes = getNodesInShortestPathOrder(finishNode);\r\n      shortestPathNodes.forEach((n, i) => (n.pathOrder = i + 1));\r\n      return true;\r\n    }\r\n\r\n    for (let n of getNeighbors(currentNode, grid)) {\r\n      if (n.isWall || !!n.visitedOrder) continue;\r\n      const g = currentNode.distance + 1;\r\n      if (g < n.distance) {\r\n        n.distance = g;\r\n        n.previousNode = currentNode;\r\n      }\r\n      if (!open.includes(n)) {\r\n        open.push(n);\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import {\r\n  getNodesInShortestPathOrder,\r\n  updateUnvisitedNeighbors,\r\n} from \"./helper\";\r\n\r\n// Performs Breadth-first search.\r\n\r\nexport default function bfs(grid, start, finish) {\r\n  const startNode = grid[start[0]][start[1]];\r\n  const finishNode = grid[finish[0]][finish[1]];\r\n\r\n  startNode.distance = 0;\r\n  let count = 1;\r\n  startNode.visitedOrder = count;\r\n  count++;\r\n  const queue = [];\r\n  queue.push(startNode);\r\n  while (queue.length) {\r\n    const currentNode = queue.shift();\r\n    if (currentNode === finishNode) {\r\n      let shortestPathNodes = getNodesInShortestPathOrder(finishNode);\r\n      shortestPathNodes.forEach((n, i) => (n.pathOrder = i + 1));\r\n      return true;\r\n    }\r\n    for (let neighbor of updateUnvisitedNeighbors(currentNode, grid)) {\r\n      neighbor.visitedOrder = count;\r\n      count++;\r\n      queue.push(neighbor);\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import { getNeighbors, getNodesInShortestPathOrder } from \"./helper\";\r\n\r\n// Performs greedy best-first search.\r\n\r\nexport default function greedybfs(grid, start, finish) {\r\n  const open = [];\r\n  const startNode = grid[start[0]][start[1]];\r\n  const finishNode = grid[finish[0]][finish[1]];\r\n\r\n  function getH(node) {\r\n    return (\r\n      Math.abs(node.row - finishNode.row) + Math.abs(node.col - finishNode.col)\r\n    );\r\n  }\r\n\r\n  open.push(startNode);\r\n  startNode.distance = 0;\r\n  let count = 1;\r\n\r\n  while (open.length) {\r\n    open.sort((nodeA, nodeB) => {\r\n      return getH(nodeB) - getH(nodeA);\r\n    });\r\n\r\n    const currentNode = open.pop();\r\n    currentNode.visitedOrder = count;\r\n    count++;\r\n\r\n    if (currentNode === finishNode) {\r\n      let shortestPathNodes = getNodesInShortestPathOrder(finishNode);\r\n      shortestPathNodes.forEach((n, i) => (n.pathOrder = i + 1));\r\n      return true;\r\n    }\r\n\r\n    for (let n of getNeighbors(currentNode, grid)) {\r\n      if (n.isWall || !!n.visitedOrder) continue;\r\n      const g = currentNode.distance + 1;\r\n      if (g < n.distance) {\r\n        n.distance = g;\r\n        n.previousNode = currentNode;\r\n      }\r\n      if (!open.includes(n)) {\r\n        open.push(n);\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import React, { useEffect, useState, useCallback, useMemo } from \"react\";\r\nimport { TAlgo } from \"../types/TAlgo\";\r\nimport AlgoSelect from \"./AlgoSelect\";\r\nimport Grid from \"./Grid\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { TNode } from \"../types/TNode\";\r\nimport Button from \"./Button\";\r\nimport Slider from \"@bit/mui-org.material-ui.slider\";\r\n\r\nimport { dijkstra, dfs, astar, bfs, greedybfs } from \"../algorithms/library\";\r\n\r\nconst Visualiser: React.FC<{}> = () => {\r\n  const algos: TAlgo[] = [\r\n    {\r\n      name: \"Dijkstra's Algorithm\",\r\n      guaranteesShortest: true,\r\n      weighted: true,\r\n      algorithm: dijkstra,\r\n      link: \"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\",\r\n    },\r\n    {\r\n      name: \"Breadth-first search\",\r\n      guaranteesShortest: true,\r\n      weighted: false,\r\n      algorithm: bfs,\r\n      link: \"https://en.wikipedia.org/wiki/Breadth-first_search\",\r\n    },\r\n    {\r\n      name: \"A* search\",\r\n      guaranteesShortest: true,\r\n      weighted: true,\r\n      algorithm: astar,\r\n      link: \"https://en.wikipedia.org/wiki/A*_search_algorithm\",\r\n    },\r\n    {\r\n      name: \"Depth-first search\",\r\n      guaranteesShortest: false,\r\n      weighted: false,\r\n      algorithm: dfs,\r\n      link: \"https://en.wikipedia.org/wiki/Depth-first_search\",\r\n    },\r\n    {\r\n      name: \"Greedy best-first search\",\r\n      guaranteesShortest: false,\r\n      weighted: true,\r\n      algorithm: greedybfs,\r\n      link: \"https://en.wikipedia.org/wiki/Best-first_search#Greedy_BFS\",\r\n    },\r\n  ];\r\n\r\n  const [algo, setAlgo] = useState(algos[0]);\r\n  const [animToggle, setAnimToggle] = useState(true);\r\n  const [isAnim, setAnim] = useState(false);\r\n  const [animSpeed, setAnimSpeed] = useState<number>(100);\r\n  const [visitedNodeLength, setVisitedNodeLength] = useState<number>(0);\r\n\r\n  const GRID_WIDTH = 42;\r\n  const GRID_HEIGHT = 22;\r\n\r\n  const cloneArray = (arr: any[][]) => {\r\n    return arr.map((row) => row.slice(0));\r\n  };\r\n\r\n  const getInitialGrid = () => {\r\n    const grid = new Array(GRID_HEIGHT);\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n      const currentRow = new Array(GRID_WIDTH);\r\n      for (let col = 0; col < GRID_WIDTH; col++) {\r\n        currentRow[col] = {\r\n          row,\r\n          col,\r\n          visitedOrder: 0,\r\n          pathOrder: 0,\r\n          isWall: false,\r\n          distance: Infinity,\r\n          weight: 1,\r\n          previousNode: null,\r\n        };\r\n      }\r\n      grid[row] = currentRow;\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  const [grid, setGrid] = useState(getInitialGrid());\r\n  const [start, setStart] = useState([10, 15]);\r\n  const [finish, setFinish] = useState([10, 35]);\r\n\r\n  const run = useCallback(() => {\r\n    // const clearPath = () => {\r\n    //   setAnim(false);\r\n    //   setGrid((prevGrid) => {\r\n    //     const newGrid = cloneArray(prevGrid);\r\n    //     newGrid.forEach((row) =>\r\n    //       row.forEach((node: TNode) => {\r\n    //         node.visitedOrder = 0;\r\n    //         node.pathOrder = 0;\r\n    //         node.distance = Infinity;\r\n    //         node.previousNode = null;\r\n    //       })\r\n    //     );\r\n    //     return newGrid;\r\n    //   });\r\n    // };\r\n\r\n    // clearPath();\r\n    setAnim(false);\r\n\r\n    setGrid((prevGrid) => {\r\n      const newGrid = cloneArray(prevGrid);\r\n      newGrid.forEach((row) =>\r\n        row.forEach((node: TNode) => {\r\n          node.visitedOrder = 0;\r\n          node.pathOrder = 0;\r\n          node.distance = Infinity;\r\n          node.previousNode = null;\r\n        })\r\n      );\r\n      const result = algo.algorithm(newGrid, start, finish);\r\n      if (!result) return prevGrid;\r\n      // const [visitedNodes, shortestPath] = result;\r\n      return newGrid;\r\n    });\r\n  }, [algo, finish, start]);\r\n\r\n  const clearWalls = () => {\r\n    setGrid((prevGrid) => {\r\n      const newGrid = cloneArray(prevGrid);\r\n      newGrid.forEach((row) =>\r\n        row.forEach((node: TNode) => {\r\n          node.isWall = false;\r\n        })\r\n      );\r\n      return newGrid;\r\n    });\r\n    run();\r\n  };\r\n\r\n  const animate = () => {\r\n    setAnim(false);\r\n    setAnimToggle(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!animToggle) {\r\n      setAnimToggle(true);\r\n      setAnim(true);\r\n    }\r\n  }, [animToggle]);\r\n\r\n  useEffect(() => {\r\n    run();\r\n  }, [run, start, finish]);\r\n\r\n  return (\r\n    <div>\r\n      <Sidebar>\r\n        <AlgoSelect algos={algos} setAlgo={setAlgo} />\r\n        <span className=\"text\">\r\n          <span className=\"highlight-text\">{algo.name}</span> is{\" \"}\r\n          {algo.weighted ? \"a \" : \"an \"}\r\n          <span className=\"highlight-text\">\r\n            {algo.weighted ? \"weighted\" : \"unweighted\"}\r\n          </span>{\" \"}\r\n          algorithm and{\" \"}\r\n          <span className=\"highlight-text\">\r\n            {algo.guaranteesShortest ? \"guarantees\" : \"does not guarantee\"}\r\n          </span>{\" \"}\r\n          the shortest path.{\" \"}\r\n          <a\r\n            href={algo.link}\r\n            style={{ fontSize: 10, color: \"rgb(255,255,255,0.5)\" }}\r\n          >\r\n            (Wikipedia)\r\n          </a>\r\n        </span>\r\n\r\n        <Button label=\"Clear Walls\" onClick={clearWalls} />\r\n        <Button label=\"Show Animation\" onClick={animate} />\r\n        {/* <Slider\r\n          min={5}\r\n          max={200}\r\n          value={animSpeed}\r\n          onChange={(e: any, newValue: number | number[]) =>\r\n            setAnimSpeed(newValue as number)\r\n          }\r\n        /> */}\r\n        <span style={{ color: \"rgb(255,255,255,0.65)\", marginTop: 20 }}>\r\n          Path length: {grid[finish[0]][finish[1]].pathOrder || \"-\"}\r\n        </span>\r\n        <span style={{ color: \"rgb(255,255,255,0.65)\" }}>\r\n          Visited tiles:{\" \"}\r\n          {(() => {\r\n            const tilesVisited = grid\r\n              .flat()\r\n              .map((n) => n.visitedOrder)\r\n              .reduce((a, b) => Math.max(a, b));\r\n            const totalTiles = GRID_WIDTH * GRID_HEIGHT;\r\n            return `${tilesVisited}/${totalTiles} (${\r\n              Math.round((tilesVisited * 1000) / totalTiles) / 10\r\n            }%)`;\r\n          })()}\r\n        </span>\r\n      </Sidebar>\r\n      <Grid\r\n        gridState={[grid, setGrid]}\r\n        startState={[start, setStart]}\r\n        finishState={[finish, setFinish]}\r\n        run={run}\r\n        isAnim={isAnim}\r\n        animSpeed={100}\r\n        visitedNodeLength={isAnim ? grid[finish[0]][finish[1]].visitedOrder : 0}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Visualiser;\r\n","import React from \"react\";\r\nimport Particles from \"react-particles-js\";\r\n\r\nexport default () => (\r\n  <div\r\n    style={{\r\n      position: \"absolute\",\r\n      top: 0,\r\n      left: 0,\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      overflow: \"hidden\",\r\n    }}\r\n  >\r\n    <Particles\r\n      params={{\r\n        particles: {\r\n          number: {\r\n            value: 80,\r\n            density: {\r\n              enable: true,\r\n              value_area: 800,\r\n            },\r\n          },\r\n          size: {\r\n            value: 3,\r\n            random: true,\r\n            anim: {\r\n              enable: true,\r\n              speed: 2,\r\n            },\r\n          },\r\n          color: {\r\n            value: \"#888888\",\r\n          },\r\n          line_linked: {\r\n            distance: 120,\r\n            opacity: 0.6,\r\n            color: \"#444444\",\r\n          },\r\n          move: {\r\n            speed: 0.2,\r\n          },\r\n        },\r\n        interactivity: {\r\n          detect_on: \"window\",\r\n          events: {\r\n            onhover: {\r\n              enable: true,\r\n              mode: \"bubble\",\r\n            },\r\n          },\r\n          modes: {\r\n            bubble: {\r\n              distance: 300,\r\n              size: 6,\r\n            },\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n","import React from \"react\";\nimport Visualiser from \"./components/Visualiser\";\nimport ParticleBg from \"./components/ParticleBg\";\n\nfunction App() {\n  return (\n    <>\n      <Visualiser />\n      <ParticleBg />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}